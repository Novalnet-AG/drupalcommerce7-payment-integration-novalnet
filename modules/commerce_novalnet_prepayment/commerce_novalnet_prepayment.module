<?php
/**
 * @file
 * Novalnet payment method module
 * This module is used for real time processing of
 * Novalnet transaction of customers.
 *
 * @category   PHP
 * @package    commerce_novalnet
 * @author     Novalnet AG
 * @copyright  Copyright by Novalnet
 * @license    https://www.novalnet.com/payment-plugins/free/license
 * @version    11.1.2
 *
 *  Script : commerce_novalnet_prepayment.module
 *
 */

/**
 * Novalnet key for Prepayment Payment
 */
  define('COMMERCE_NOVALNET_PREPAYMENT_KEY', 27);
  define('COMMERCE_NOVALNET_PREPAYMENT', 'PREPAYMENT');

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_novalnet_prepayment_commerce_payment_method_info() {
  $payment_methods = array();

  $global_setting   = commerce_novalnet_validate_basic_data('commerce_novalnet_prepayment');
  $payment_settings = rules_config_load('commerce_payment_commerce_novalnet_prepayment');
  
  if (!empty($global_setting) && !empty($payment_settings)) {
    //Load payment settings
    $payment_settings = commerce_payment_method_instance_load('commerce_novalnet_prepayment|commerce_payment_commerce_novalnet_prepayment');
    $payment_settings = empty($payment_settings['settings']) ? array() : $payment_settings['settings'];
  }

  if ( (empty($global_setting) || empty($payment_settings)) && arg(0) != 'admin')
    return $payment_methods;

  $payment_methods['commerce_novalnet_prepayment'] = array(
    'title'         => t('Prepayment'),
    'display_title' => empty($global_setting['nn_logo']) ? t('Prepayment') :commerce_novalnet_payment_display_title(t('Prepayment'), 'commerce_novalnet_prepayment'),
    'description'   => t('Prepayment payment via Novalnet.'),
    'active'        => FALSE,
  );

  return $payment_methods;
}

/**
 * Implements callback for payment setting.
 * @param array $settings
 * return array $form
 */
function commerce_novalnet_prepayment_settings_form($settings = array()) {
  $form = array();
  commerce_novalnet_payment_common_settings($form, $settings); //  Calling common function for get common settings  
  commerce_novalnet_invoice_prepayment_additional_settings($form, $settings);
  return $form;
}

/**
 * Payment method callback: submit form.
 * @param array $payment_method
 * @param array $pane_values
 * @param array $checkout_pane
 * @param object $order
 * @return array
 */
function commerce_novalnet_prepayment_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form['novalnet_prepayment_markup'] = array(
    '#type'   => 'markup',
    '#markup' => t("Once you've submitted the order, you will receive an e-mail with account details to make payment") . commerce_novalnet_test_payment_info($payment_method['settings']),
  );
  return $form;
}

/**
 * Payment method callback: submit form submission.
 * @param array $payment_method
 * @param array $pane_form
 * @param array $pane_values
 * @param object $order
 * @param array $charge
 * @return array
 */
function commerce_novalnet_prepayment_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $global_setting = commerce_novalnet_validate_basic_data('commerce_novalnet_prepayment');
  $payment_method['global_setting'] = $global_setting;

  $data = array();
  commerce_novalnet_get_common_params($data, $payment_method, $order, $charge); //Call this function for getting common params

  $data['invoice_type']   = 'PREPAYMENT';
  $data['invoice_ref']    = "BNR-" . $data['product'] . "-" . $data['order_no'];

  $response = commerce_novalnet_drupal_request($data, COMMERCE_NOVALNET_PAYGATE_URL);
  parse_str($response, $parsed_response);
  $parsed_response = array_merge($data, $parsed_response);

  if ($parsed_response['status'] == 100) { // Check the transaction is completed successfully on Novalnet server
    $parsed_response['order_status'] = $payment_method['settings']['order_status'];
    commerce_novalnet_complete_order($order, $parsed_response, $payment_method);
  }
  else { // If the transaction got failure
    drupal_set_message(check_plain($parsed_response['status_desc']), 'error');
    return FALSE;
  }
}
