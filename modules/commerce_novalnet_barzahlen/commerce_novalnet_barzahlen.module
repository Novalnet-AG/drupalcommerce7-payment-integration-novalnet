<?php
/**
 * @file
 * Novalnet payment method module
 * This module is used for real time processing of
 * Novalnet transaction of customers.
 *
 * @category   PHP
 * @package    commerce_novalnet
 * @author     Novalnet AG
 * @copyright  Copyright by Novalnet
 * @license    https://www.novalnet.com/payment-plugins/free/license
 * @version    11.1.2
 *
 *  Script : commerce_novalnet_barzahlen.module
 *
 */

/**
 * Novalnet key for Barzahlen Payment
 */
  define('COMMERCE_NOVALNET_BARZAHLEN_KEY', 59);
  define('COMMERCE_NOVALNET_BARZAHLEN', 'BARZAHLEN');

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_novalnet_barzahlen_commerce_payment_method_info() {
  $payment_methods = array();
  $global_setting   = commerce_novalnet_validate_basic_data('commerce_novalnet_barzahlen');
  $payment_settings = rules_config_load('commerce_payment_commerce_novalnet_barzahlen');
  if (!empty($global_setting) && !empty($payment_settings)) {
    //Load payment settings
    $payment_settings = commerce_payment_method_instance_load('commerce_novalnet_barzahlen|commerce_payment_commerce_novalnet_barzahlen');
    $payment_settings = empty($payment_settings['settings']) ? array() : $payment_settings['settings'];
  }
  if ( (empty($global_setting) || empty($payment_settings)) && arg(0) != 'admin')
    return $payment_methods;

  $payment_methods['commerce_novalnet_barzahlen'] = array(
    'title'         => t('Barzahlen'),
    'display_title' => empty($global_setting['nn_logo']) ? t('Barzahlen') :commerce_novalnet_payment_display_title(t('Barzahlen'), 'commerce_novalnet_barzahlen'),
    'description'   => t('Barzahlen payment via Novalnet.'),
    'active'        => FALSE,
  );

  return $payment_methods;
}

/**
 * Implements callback for payment setting.
 * @param array $settings
 * @return array
 */
function commerce_novalnet_barzahlen_settings_form($settings = array()) {
  $form = array();
  commerce_novalnet_payment_common_settings($form, $settings); //  Calling common function for get common settings
  $form['due_date']        = array(
    '#type'             => 'textfield',
    '#title'            => t('Slip expiry date (in days)'),
    '#description'      => t('Enter the number of days to pay the amount at store near you. If the field is empty, 14 days will be set as default.'),
    '#default_value'    => isset($settings['due_date']) ? $settings['due_date'] : '',
  );
  $order_status   = commerce_order_status_options_list();
  $form['callback_status'] = array(
    '#type'          => 'select',
    '#title'         => t('Callback order status'),
    '#options'       => $order_status,
    '#default_value' => isset($settings['callback_status']) ? $settings['callback_status'] : 'completed',
  );
  return $form;
}

/**
 * Payment method callback: submit form.
 * @param array $payment_method
 * @param array $pane_values
 * @param array $checkout_pane
 * @param object $order
 * @return array
 */
function commerce_novalnet_barzahlen_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $settings = $payment_method['settings'];
  $form['commerce_novalnet_barzahlen'] = array(
    '#type'   => 'markup',
    '#weight' => '50',
    '#markup' => t("After completing your order you get a payment slip from Barzahlen that you can easily print out or have it sent via SMS to your mobile phone. With the help of that payment slip you can pay your online purchase at one of our retail partners (e.g. supermarket).") . commerce_novalnet_test_payment_info($settings),
  );
  return $form;
}

/**
 * Payment method callback: submit form submission.
 * @param array $payment_method
 * @param array $pane_form
 * @param array $pane_values
 * @param object $order
 * @param array $charge
 * @return bool
 */
function commerce_novalnet_barzahlen_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $global_setting = commerce_novalnet_validate_basic_data('commerce_novalnet_barzahlen');
  $payment_method['global_setting'] = $global_setting;

  $data = array();

  commerce_novalnet_get_common_params($data, $payment_method, $order, $charge); //Call this function for getting common params

  if (!empty($payment_method['settings']['due_date'])) {
    $data['cashpayment_due_date']     = date('Y-m-d', strtotime('+ ' . $payment_method['settings']['due_date'] . ' day'));
  }

  $response = commerce_novalnet_drupal_request($data, COMMERCE_NOVALNET_PAYGATE_URL);
  parse_str($response, $parsed_response);
  $parsed_response = array_merge($data, $parsed_response);

  if ($parsed_response['status'] == 100) { // Check the transaction is completed successfully on Novalnet server
    if (commerce_novalnet_fraud_check($parsed_response)) { // Call this function for check fraud module
      return FALSE;
    }
    $parsed_response['order_status'] = $payment_method['settings']['order_status'];

    commerce_novalnet_complete_order($order, $parsed_response, $payment_method);
  }
  else { // If the transaction got failure
    drupal_set_message(check_plain($parsed_response['status_desc']), 'error');
    return FALSE;
  }
}
